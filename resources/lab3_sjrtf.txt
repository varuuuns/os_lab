#include<bits/stdc++.h>
using namespace std;
struct process {
    int id;
    int at;
    int bt;
    int wt;
    int tat;
    int ct;
    int rt;  
};
void sjrtf(vector<process>& proc) {
    int n = proc.size();
    sort(proc.begin(), proc.end(), [](const process& a, const process& b) {
        if (a.at == b.at) {
            if (a.bt == b.bt) {
                return a.id < b.id;
            }
            return a.bt < b.bt;
        } else {
            return a.at < b.at;
        }
    });
    vector<int> compproc;
    int temp_ct = 0;
    while (compproc.size() < n) {
        int next_process = -1;
        int min_rt = INT_MAX;
        for (int i = 0; i < n; i++) {
            if (proc[i].at <= temp_ct && proc[i].rt > 0) {
                if (proc[i].rt < min_rt) {
                    min_rt = proc[i].rt;
                    next_process = i;
                }
            }
        }
        if (next_process != -1) {
            temp_ct++;
            proc[next_process].rt--;
            if (proc[next_process].rt == 0) {
                proc[next_process].ct = temp_ct;
                proc[next_process].tat = proc[next_process].ct - proc[next_process].at;
                proc[next_process].wt = proc[next_process].tat - proc[next_process].bt;
                compproc.push_back(next_process);
            }
        } else {
            temp_ct++;
        }
    }
    cout << "P AT\t BT\t CT\t TAT\t WT\n";
    for (int i = 0; i < n; ++i) {
        cout << "P" << proc[i].id << "\t " << proc[i].at << "\t "
             << proc[i].bt << "\t " << proc[i].ct << "\t " << proc[i].tat
             << "\t " << proc[i].wt << "\n";
    }
}
int main() {
    int n;
    cout << "Enter number of processes: ";
    cin >> n;
    vector<process> proc(n);
    for (int i = 0; i < n; i++) {
        cout << "Enter arrival time of process P" << i + 1 << ": ";
        cin >> proc[i].at;
        cout << "Enter burst time of process P" << i + 1 << ": ";
        cin >> proc[i].bt;
        proc[i].id = i + 1;
        proc[i].ct = 0;
        proc[i].tat = 0;
        proc[i].wt = 0;
        proc[i].rt = proc[i].bt;
    }
    sjrtf(proc);
    return 0;
}